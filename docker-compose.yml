version: '3.8'

services:
  # PostgreSQL 数据库
  db:
    image: postgres:15-alpine
    container_name: newapi_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: newapi_db
      POSTGRES_USER: newapi
      POSTGRES_PASSWORD: newapi_password_change_me
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U newapi"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - newapi_network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: newapi_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - newapi_network

  # FastAPI 后端
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend.Dockerfile
    container_name: newapi_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql+asyncpg://newapi:newapi_password_change_me@db:5432/newapi_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SECRET_KEY=change-this-secret-key-in-production
      - DEBUG=False
      - ENVIRONMENT=production
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - newapi_network

  # React 前端
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend.Dockerfile
      args:
        - VITE_API_BASE_URL=http://localhost/api
    container_name: newapi_frontend
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - newapi_network

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: newapi_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - newapi_network

volumes:
  postgres_data:
    name: newapi_postgres_data
  redis_data:
    name: newapi_redis_data
  backend_logs:
    name: newapi_backend_logs
  nginx_logs:
    name: newapi_nginx_logs

networks:
  newapi_network:
    name: newapi_network
    driver: bridge


